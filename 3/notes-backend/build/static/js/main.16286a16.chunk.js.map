{"version":3,"sources":["components/Note.js","components/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportanceOf","label","important","key","id","className","content","onClick","axios","get","then","response","data","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","backgroundColor","position","top","paddingLeft","borderRadius","App","console","log","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","length","find","n","changedNote","returnedNote","map","catch","error","setTimeout","filter","notesToShow","type","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16286a16.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportanceOf}) => {\n    const label = note.important\n        ? 'make not important' : 'make important';\n    \n    return (\n        <li key={note.id} className='note'>\n            {note.content + ' '}\n            <button onClick={() => toggleImportanceOf(note)}> {label} </button>\n        </li>\n    )\n\n}\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default {  getAll, create, update }","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Note from './components/Note';\nimport noteService from './components/notes'\nimport Notification from './components/Notification'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'white',\n    fontStyle: 'italic',\n    fontSize: 12,\n    backgroundColor: 'darkred',\n    position: 'relative',\n    top:\"100px\",\n    paddingLeft:\"10px\",\n    borderRadius: 4\n  }\n\n  return (\n    <div style={footerStyle} className='footer'>\n      <br />\n      <em>Department of Computer Science, University of Helsinki 2019</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  console.log()\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  // useEffect is a way of executing code synchronously\n  // if the second arg is [], then it only executes the code once\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, []) \n  \n  console.log('render', notes.length, 'notes')\n  \n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n      })\n      .catch(error => { \n        setErrorMessage(`Note ${note.content} was already removed from the server`);\n        setTimeout( () => setErrorMessage(null), 4000);\n        setNotes(notes.filter(n => n.id !== id));\n        \n      })\n  }\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important)\n  const rows = () => notesToShow.map((note) => <Note key={note.id} note={note} toggleImportanceOf={() => toggleImportanceOf(note.id)}/>);\n  \n  /* we create a new note object from the form input and create a new note\n  that we add to the collection of notes when we hit submit */\n  const addNoteToCollection = (event) => { \n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.45,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n      })\n  }\n\n  // this function is event listener that always logs the state of the form input\n  const handleNoteChange = (event) => { \n    setNewNote(event.target.value);\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <button type=\"submit\" onClick={() => setShowAll(!showAll)}> {showAll ? 'all notes shown': 'only important notes shown'} </button>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNoteToCollection}>\n        <input \n          value={newNote} \n          onChange={handleNoteChange \n            /* everytime we change the input, we change the newNote value to the \n            form's input */ } \n        />       \n        <button type=\"submit\"> save </button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}